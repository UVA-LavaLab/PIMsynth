#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
File: generator_asm.py
Description: Generator for C with RISC-V inline assembly
Author: Mohammadhosein Gholamrezaei <uab9qt@virginia.edu> - BLIF-to-C parser generator code framework
Author: Deyuan Guo <guodeyuan@gmail.com> - Designed and implemented RISC-V inline assembly format
                                         - Support bus inputs and outputs
                                         - Support inline assembly for analog PIM
Date: 2024-09-17
"""


class GeneratorAsm():
    """ Generator for C with RISC-V inline assembly """

    def __init__(self, dag, num_regs, func_name, pim_mode):
        """ Init """
        self.dag = dag
        self.data_type = "int"
        self.num_regs = num_regs
        self.func_name = func_name
        self.pim_mode = pim_mode

    def sanitize_token(self, token):
        """ Sanitize token name to be used as a C variable name
            Bus name: a[0] -> a_0_
        """
        return token.replace("[", "_").replace("]", "_")

    def sanitize_token_list(self, token_list):
        """ Sanitize token names to be used as a C variable names
            Bus name: a[0] -> a_0_
        """
        return [token.replace("[", "_").replace("]", "_") for token in token_list]

    def generate_code(self):
        """ Generate C code """
        code = self.generate_header_files()
        code += self.generate_function_signature()
        code += self.generate_function_body()
        return code

    def generate_header_files(self):
        """ Generate header files """
        code = "// Auto Generated by Bit-Serial Compiler: C converted from BLIF\n\n"
        return code

    def generate_function_signature(self):
        """ Generate function signature """
        code = "void "
        code += self.func_name
        code += "(\n"
        code += self.generate_function_args()
        code += ")\n"
        return code

    def generate_function_args(self):
        """ Generate function args passed by pointers """
        inputs = self.sanitize_token_list(self.dag.get_in_ports())
        in_items = [f"{self.data_type} *{item}_pi" for item in inputs]
        outputs = self.sanitize_token_list(self.dag.get_out_ports())
        out_items = [f"{self.data_type} *{item}_po" for item in outputs]
        return f"\t{',\n\t'.join(in_items + out_items)}\n"

    def generate_function_body(self):
        """ Generate function body """
        code = "{\n"
        code += self.generate_temporary_variables()
        code += self.generate_temporary_variables_in()
        code += self.generate_temporary_variables_out()
        code += "\n"
        code += self.generate_all_asm_statements()
        code += "\n"
        code += self.generate_statements_output()
        code += "}\n"
        return code

    def generate_temporary_variables(self):
        """ Generate temporary variables for wires """
        wire_list = self.dag.get_wire_list()
        if len(wire_list) == 0:
            return ""
        variables = ', '.join(wire_list)
        return f"\t{self.data_type} {variables};\n"

    def generate_temporary_variables_in(self):
        """ Generate temp variables that dereference input pointers """
        inputs = self.sanitize_token_list(self.dag.get_in_ports())
        return f"\t{self.data_type} {', '.join([f'{item} = *{item}_pi' for item in inputs])};\n"

    def generate_temporary_variables_out(self):
        """ Generate temp variables for storing outputs """
        outputs = self.sanitize_token_list(self.dag.get_out_ports())
        return f"\t{self.data_type} {', '.join(outputs)};\n"

    def generate_clobber_list(self):
        """ Generate the RISC-V register clobbering list """
        # risc-v register: ra, a0-a7, s0-s11, t0-t6
        # ra: return address, a0-a7: argument registers, s0-s11: callee saved registers, t0-t6: temporary registers
        regs_special = ['"ra"']
        regs_args = [f'"a{i}"' for i in range(8)]
        regs_saved = [f'"s{i}"' for i in range(12)]
        regs_temp = [f'"t{i}"' for i in range(7)]
        # clobber list: use t0-t6 for 1-7 registers, use s0-s11 for 8-19 registers
        regs_temp_to_use = 0
        regs_saved_to_use = 0
        if self.num_regs > 7 and self.num_regs <= 19:
            regs_temp_to_use = 7
            regs_saved_to_use = self.num_regs - 7
        if self.num_regs <= 7:
            regs_temp_to_use = self.num_regs
        regs_to_clobber = regs_special + regs_args + regs_saved[regs_saved_to_use:] + regs_temp[regs_temp_to_use:]
        return ','.join(regs_to_clobber)

    def get_asm_instructions(self, clobber):
        """ Return a dictionary that maps logic gate names to assembly code generation functions """
        if self.pim_mode == "digital":
            return self.get_asm_instructions_digital(clobber)
        if self.pim_mode == "analog":
            return self.get_asm_instructions_analog(clobber)
        raise ValueError(f"Error: Unknown pim mode {self.pim_mode}")

    def get_asm_instructions_digital(self, clobber):
        """ Return a dictionary that maps logic gate names to assembly code generation functions for digital PIM """
        # =r: output register, r: input register
        # return a single line assembly code. Be careful with " and \\n
        return {
            "inv1": lambda output, inputs: (
                f'"#PIM_OP: inv1 %1 -> %0 \\n'
                f' not %0, %1'
                f'" : "=r" ({output}) : "r" ({inputs[0]}) : {clobber}'
            ),
            "and2": lambda output, inputs: (
                f'"#PIM_OP: and2 %1, %2 -> %0 \\n'
                f' and %0, %1, %2'
                f'" : "=r" ({output}) : "r" ({inputs[0]}), "r" ({inputs[1]}) : {clobber}'
            ),
            "nand2": lambda output, inputs: (
                f'"#PIM_OP: nand2 %1, %2 -> %0 \\n'
                f' and %0, %1, %2 \\n'
                f' not %0, %0'
                f'" : "=r" ({output}) : "r" ({inputs[0]}), "r" ({inputs[1]}) : {clobber}'
            ),
            "or2": lambda output, inputs: (
                f'"#PIM_OP: or2 %1, %2 -> %0 \\n'
                f' or %0, %1, %2'
                f'" : "=r" ({output}) : "r" ({inputs[0]}), "r" ({inputs[1]}) : {clobber}'
            ),
            "nor2": lambda output, inputs: (
                f'"#PIM_OP: nor2 %1, %2 -> %0 \\n'
                f' or %0, %1, %2 \\n'
                f' not %0, %0'
                f'" : "=r" ({output}) : "r" ({inputs[0]}), "r" ({inputs[1]}) : {clobber}'
            ),
            "xor2": lambda output, inputs: (
                f'"#PIM_OP: xor2 %1, %2 -> %0\\n'
                f' xor %0, %1, %2'
                f'" : "=r" ({output}) : "r" ({inputs[0]}), "r" ({inputs[1]}) : {clobber}'
            ),
            "xnor2": lambda output, inputs: (
                f'"#PIM_OP: xnor2 %1, %2 -> %0 \\n'
                f' xor %0, %1, %2 \\n'
                f' not %0, %0'
                f'" : "=r" ({output}) : "r" ({inputs[0]}), "r" ({inputs[1]}) : {clobber}'
            ),
            "mux2": lambda output, inputs: ( # %0 = %1 ? %3 : %2
                f'"#PIM_OP: mux2 %1, %2, %3 -> %0 \\n'
                f' not s1, %1 \\n'
                f' and s2, s1, %2 \\n'
                f' and s3, %1, %3 \\n'
                f' or %0, s2, s3'
                f'" : "=r" ({output}) : "r" ({inputs[0]}), "r" ({inputs[1]}), "r" ({inputs[2]}) : {clobber}'
            ),
            "maj3": lambda output, inputs: (
                f'"#PIM_OP: maj3 %1, %2, %3 -> %0 \\n'
                f' and s1, %1, %2 \\n'
                f' and s2, %2, %3 \\n'
                f' and s3, %1, %3 \\n'
                f' or s1, s1, s2 \\n'
                f' or %0, s1, s3'
                f'" : "=r" ({output}) : "r" ({inputs[0]}), "r" ({inputs[1]}), "r" ({inputs[2]}) : {clobber}'
            ),
            "zero": lambda output, inputs: (
                f'"#PIM_OP: zero -> %0 \\n'
                f' xor %0, %0, %0'
                f'" : "=r" ({output}) : : {clobber}'
            ),
            "one": lambda output, inputs: (
                f'"#PIM_OP: one -> %0 \\n'
                f' xor %0, %0, %0 \\n'
                f' not %0, %0'
                f'" : "=r" ({output}) : : {clobber}'
            ),
        }

    def get_asm_instructions_analog(self, clobber):
        """ Return a dictionary that maps logic gate names to assembly code generation functions for analog PIM """
        # return a single line assembly code. Be careful with " and \\n
        # r: input register
        # +r: both input and output
        # 0: input uses same register as output 0
        # =r: output register
        # =&r: output must be different from inputs using early clobber
        return {
            "copy": lambda output, inputs: (
                f'"#PIM_OP: copy1 %1 -> %0 \\n'
                f' mv %0, %1'
                f'" : "=&r" ({output}) : "r" ({inputs[0]}) : {clobber}'
            ),
            "inv1": lambda output, inputs: (
                f'"#PIM_OP: inv1 %1 -> %0 \\n'
                f' not %0, %1'
                f'" : "=r" ({output}) : "0" ({inputs[0]}) : {clobber}'
            ),
            "and2": lambda output, inputs: (
                f'"#PIM_OP: and2 %1, %2 -> %0 \\n'
                f' and %0, %1, %2 \\n'
                f' mv %1, %0 \\n'
                f' mv %2, %0'
                f'" : "=&r" ({output}), "+r" ({inputs[0]}), "+r" ({inputs[1]}) : : {clobber}'
            ),
            "or2": lambda output, inputs: (
                f'"#PIM_OP: or2 %1, %2 -> %0 \\n'
                f' or %0, %1, %2 \\n'
                f' mv %1, %0 \\n'
                f' mv %2, %0'
                f'" : "=&r" ({output}), "+r" ({inputs[0]}), "+r" ({inputs[1]}) : : {clobber}'
            ),
            "maj3": lambda output, inputs: (
                f'"#PIM_OP: maj3 %1, %2, %3 -> %0 \\n'
                f' and s1, %1, %2 \\n'
                f' and s2, %2, %3 \\n'
                f' and s3, %1, %3 \\n'
                f' or s1, s1, s2 \\n'
                f' or %0, s1, s3 \\n'
                f' mv %1, %0 \\n'
                f' mv %2, %0 \\n'
                f' mv %3, %0'
                f'" : "=&r" ({output}), "+r" ({inputs[0]}), "+r" ({inputs[1]}), "+r" ({inputs[2]}) : : {clobber}'
            ),
            "zero": lambda output, inputs: (
                f'"#PIM_OP: zero -> %0 \\n'
                f' xor %0, %0, %0'
                f'" : "=r" ({output}) : : {clobber}'
            ),
            "one": lambda output, inputs: (
                f'"#PIM_OP: one -> %0 \\n'
                f' xor %0, %0, %0 \\n'
                f' not %0, %0'
                f'" : "=r" ({output}) : : {clobber}'
            ),
        }

    def generate_single_asm_statement(self, gate, asm_instructions):
        """ Generate a single assembly statement based on the logic gate type """
        inputs = self.sanitize_token_list(gate.inputs)
        output = self.sanitize_token(gate.outputs[0])
        # Temporary solution to make scheduling result correct
        volatile = " volatile " if gate.has_deps else ""

        for gate_func, asm_func in asm_instructions.items():
            if gate.gate_func.startswith(gate_func):
                return f'\tasm{volatile}({asm_func(output, inputs)});\n'

        raise ValueError(f"Error: Unhandled gate type {gate.gate_func}")

    def generate_all_asm_statements(self):
        """ Generate C asm statement sequence """
        # Generate the clobber list and assembly instruction mappings
        clobber = self.generate_clobber_list()
        asm_instructions = self.get_asm_instructions(clobber)

        # RISC-V inline assembly
        code = '\tasm("########## BEGIN ##########");\n'

        # Generate assembly statements for each item in the statement list
        for gate in self.dag.get_gate_list():
            code += self.generate_single_asm_statement(gate, asm_instructions)

        code += '\tasm("########## END ##########");\n'
        return code

    def generate_statements_output(self):
        """ Generate statements to store output temp vars to pointers """
        code = ""
        outputs = [port.replace("[", "_").replace("]", "_") for port in self.dag.get_out_ports()]
        for port in outputs:
            code += "\t*" + port + '_po = ' + port + ";\n"
        return code
