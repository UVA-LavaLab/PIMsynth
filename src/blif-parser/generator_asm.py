#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
File: generator_asm.py
Description: Generator for C with RISC-V inline assembly
Author: Mohammadhosein Gholamrezaei <uab9qt@virginia.edu> - BLIF-to-C parser generator code framework
Author: Deyuan Guo <guodeyuan@gmail.com> - Designed and implemented RISC-V inline assembly format
                                         - Support bus inputs and outputs
Date: 2024-09-17
"""

class GeneratorAsm():
    def __init__(self, parser, num_regs, func_name):
        """ Init """
        self.parser = parser
        self.dataType = "int"
        self.num_regs = num_regs
        self.func_name = func_name

    def sanitizeToken(self, token):
        """ Sanitize token name to be used as a C variable name
            Bus name: a[0] -> a_0_
        """
        return token.replace("[", "_").replace("]", "_")

    def sanitizeTokenList(self, token_list):
        """ Sanitize token names to be used as a C variable names
            Bus name: a[0] -> a_0_
        """
        return [token.replace("[", "_").replace("]", "_") for token in token_list]

    def generateCode(self):
        """ Generate C code """
        code = self.generateHeaderFiles()
        code += self.generateFunctionSignature()
        code += self.generateFunctionBody()
        return code

    def generateHeaderFiles(self):
        """ Generate header files """
        code = "// Auto Generated by Bit-Serial Compiler: C converted from BLIF\n\n"
        return code

    def generateFunctionSignature(self):
        """ Generate function signature """
        code = "void "
        code += self.func_name
        code += "(\n"
        code += self.generateFunctionArgs()
        code += ")\n"
        return code

    def generateFunctionArgs(self):
        """ Generate function args passed by pointers """
        inputs = self.sanitizeTokenList(self.parser.inputsList)
        in_items = [f"{self.dataType} *{item}_pi" for item in inputs]
        outputs = self.sanitizeTokenList(self.parser.outputsList)
        out_items = [f"{self.dataType} *{item}_po" for item in outputs]
        return f"\t{',\n\t'.join(in_items + out_items)}\n"

    def generateFunctionBody(self):
        """ Generate function body """
        code = "{\n"
        code += self.generateTemporaryVariables()
        code += self.generateTemporaryVariablesIn();
        code += self.generateTemporaryVariablesOut();
        code += "\n"
        code += self.generateStatementsAsm()
        code += "\n"
        code += self.generateStatementsOutput()
        code += "}\n"
        return code

    def generateTemporaryVariables(self):
        if len(self.parser.wireList) == 0:
            return ""
        variables = ', '.join(self.parser.wireList)
        return f"\t{self.dataType} {variables};\n"

    def generateTemporaryVariablesIn(self):
        """ Generate temp variables that dereference input pointers """
        return f"\t{self.dataType} {', '.join([f'{item} = *{item}_pi' for item in self.sanitizeTokenList(self.parser.inputsList)])};\n"

    def generateTemporaryVariablesOut(self):
        """ Generate temp variables for storing outputs """
        outputs = self.sanitizeTokenList(self.parser.outputsList)
        return f"\t{self.dataType} {', '.join(outputs)};\n"

    def generateClobberList(self):
        """ Generate the RISC-V register clobbering list """
        regs = ['"ra"'] + [f'"a{i}"' for i in range(8)] + [f'"s{i}"' for i in range(12)] + [f'"t{i}"' for i in range(self.num_regs, 7)]
        return ','.join(regs)

    def getAsmInstructions(self, clobber):
        """ Return a dictionary that maps logic gate names to assembly code generation functions """
        return {
            "inv1": lambda output, inputs: f'not %0, %1" : "=r" ({output}) : "r" ({inputs[0]}) : {clobber}',
            "and2": lambda output, inputs: f'and %0, %1, %2" : "=r" ({output}) : "r" ({inputs[0]}), "r" ({inputs[1]}) : {clobber}',
            "nand2": lambda output, inputs: f'and %0, %1, %2 \\n not %0, %0" : "=r" ({output}) : "r" ({inputs[0]}), "r" ({inputs[1]}) : {clobber}',
            "or2": lambda output, inputs: f'or %0, %1, %2" : "=r" ({output}) : "r" ({inputs[0]}), "r" ({inputs[1]}) : {clobber}',
            "nor2": lambda output, inputs: f'or %0, %1, %2 \\n not %0, %0" : "=r" ({output}) : "r" ({inputs[0]}), "r" ({inputs[1]}) : {clobber}',
            "xor2": lambda output, inputs: f'xor %0, %1, %2" : "=r" ({output}) : "r" ({inputs[0]}), "r" ({inputs[1]}) : {clobber}',
            "xnor2": lambda output, inputs: f'xor %0, %1, %2 \\n not %0, %0" : "=r" ({output}) : "r" ({inputs[0]}), "r" ({inputs[1]}) : {clobber}',
            "mux2": lambda output, inputs: f'not s1, %1 \\n and s2, s1, %2 \\n and s3, %1, %3 \\n or %0, s2, s3" : "=r" ({output}) : "r" ({inputs[0]}), "r" ({inputs[1]}), "r" ({inputs[2]}) : {clobber}',
            "maj3": lambda output, inputs: f'and s1, %1, %2 \\n and s2, %2, %3 \\n and s3, %1, %3 \\n or s1, s1, s2 \\n or %0, s1, s3" : "=r" ({output}) : "r" ({inputs[0]}), "r" ({inputs[1]}), "r" ({inputs[2]}) : {clobber}',
            "zero": lambda output, inputs: f'xor %0, %0, %0" : "=r" ({output}) : "r" ({output}) : {clobber}',
        }

    def generateAsmStatement(self, item, asm_instructions):
        """ Generate a single assembly statement based on the logic gate type """
        inputs = self.sanitizeTokenList(item.inputList)
        output = self.sanitizeToken(item.output)

        for key, asm_func in asm_instructions.items():
            if item.name.startswith(key):
                return f'\tasm("{asm_func(output, inputs)});\n'

        print(f"Error: Unhandled item name {item.name}")
        return ''

    def generateStatementsAsm(self):
        """ Generate C asm statement sequence """
        # Generate the clobber list and assembly instruction mappings
        clobber = self.generateClobberList()
        asm_instructions = self.getAsmInstructions(clobber)

        # RISC-V inline assembly
        code = '\tasm("########## BEGIN ##########");\n'

        # Generate assembly statements for each item in the statement list
        for item in self.parser.statementList:
            code += self.generateAsmStatement(item, asm_instructions)

        code += '\tasm("########## END ##########");\n'
        return code

    def generateStatementsOutput(self):
        """ Generate statements to store output temp vars to pointers """
        code = ""
        outputs = [item.replace("[", "_").replace("]", "_") for item in self.parser.outputsList]
        for item in outputs:
            code += "\t*" + item + '_po = ' + item + ";\n"
        return code

