#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
File: generator_bitwise.py
Description: C code generator using bit-wise operations
Author: Mohammadhosein Gholamrezaei <uab9qt@virginia.edu> - BLIF-to-C parser generator code framework
Author: Deyuan Guo <guodeyuan@gmail.com> - Align C code generation with asm generation
Date: 2025-04-20
"""

class GeneratorBitwise():
    def __init__(self, parser, num_regs, func_name):
        """ Init """
        self.parser = parser
        self.dataType = "int"
        self.num_regs = num_regs
        self.func_name = func_name

    def sanitizeToken(self, token):
        """ Sanitize token name to be used as a C variable name
            Bus name: a[0] -> a_0_
        """
        return token.replace("[", "_").replace("]", "_")

    def sanitizeTokenList(self, token_list):
        """ Sanitize token names to be used as a C variable names
            Bus name: a[0] -> a_0_
        """
        return [token.replace("[", "_").replace("]", "_") for token in token_list]

    def generateCode(self):
        """ Generate C code """
        code = self.generateHeaderFiles()
        code += self.generateFunctionSignature()
        code += self.generateFunctionBody()
        return code

    def generateHeaderFiles(self):
        """ Generate header files """
        code = "// Auto Generated by Bit-Serial Compiler: Bit-wise C converted from BLIF\n\n"
        return code

    def generateFunctionSignature(self):
        """ Generate function signature """
        code = "void "
        code += self.func_name
        code += "(\n"
        code += self.generateFunctionArgs()
        code += ")\n"
        return code

    def generateFunctionArgs(self):
        """ Generate function args passed by pointers """
        inputs = self.sanitizeTokenList(self.parser.inputsList)
        in_items = [f"{self.dataType} *{item}_pi" for item in inputs]
        outputs = self.sanitizeTokenList(self.parser.outputsList)
        out_items = [f"{self.dataType} *{item}_po" for item in outputs]
        return f"\t{',\n\t'.join(in_items + out_items)}\n"

    def generateFunctionBody(self):
        """ Generate function body """
        code = "{\n"
        code += self.generateTemporaryVariables()
        code += self.generateTemporaryVariablesIn();
        code += self.generateTemporaryVariablesOut();
        code += "\n"
        code += self.generateAllBitwiseStatements()
        code += "\n"
        code += self.generateStatementsOutput()
        code += "}\n"
        return code

    def generateTemporaryVariables(self):
        if len(self.parser.wireList) == 0:
            return ""
        variables = ', '.join(self.parser.wireList)
        return f"\t{self.dataType} {variables};\n"

    def generateTemporaryVariablesIn(self):
        """ Generate temp variables that dereference input pointers """
        return f"\t{self.dataType} {', '.join([f'{item} = *{item}_pi' for item in self.sanitizeTokenList(self.parser.inputsList)])};\n"

    def generateTemporaryVariablesOut(self):
        """ Generate temp variables for storing outputs """
        outputs = self.sanitizeTokenList(self.parser.outputsList)
        return f"\t{self.dataType} {', '.join(outputs)};\n"

    def getBitwiseInstructions(self):
        """ Return a dictionary that maps logic gate names to bit-wise code generation functions """
        # Note: Use ! instead of ~ for bitwise NOT to make sure result is 0 or 1
        return {
            "inv1": lambda output, inputs: (
                f'\t// PIM_OP: inv1 %1 -> %0 \n'
                f'\t{output} = !{inputs[0]};\n'
            ),
            "and2": lambda output, inputs: (
                f'\t// PIM_OP: and2 %1, %2 -> %0 \n'
                f'\t{output} = {inputs[0]} & {inputs[1]};\n'
            ),
            "nand2": lambda output, inputs: (
                f'\t// PIM_OP: nand2 %1, %2 -> %0 \n'
                f'\t{output} = !({inputs[0]} & {inputs[1]});\n'
            ),
            "or2": lambda output, inputs: (
                f'\t// PIM_OP: or2 %1, %2 -> %0 \n'
                f'\t{output} = {inputs[0]} | {inputs[1]};\n'
            ),
            "nor2": lambda output, inputs: (
                f'\t// PIM_OP: nor2 %1, %2 -> %0 \n'
                f'\t{output} = !({inputs[0]} | {inputs[1]});\n'
            ),
            "xor2": lambda output, inputs: (
                f'\t// PIM_OP: xor2 %1, %2 -> %0 \n'
                f'\t{output} = {inputs[0]} ^ {inputs[1]};\n'
            ),
            "xnor2": lambda output, inputs: (
                f'\t// PIM_OP: xnor2 %1, %2 -> %0 \n'
                f'\t{output} = !({inputs[0]} ^ {inputs[1]});\n'
            ),
            "mux2": lambda output, inputs: ( # %0 = %1 ? %3 : %2
                f'\t// PIM_OP: mux2 %1, %2, %3 -> %0 \n'
                f'\t{output} = {inputs[0]} ? {inputs[2]} : {inputs[1]};\n'
            ),
            "maj3": lambda output, inputs: (
                f'\t// PIM_OP: maj3 %1, %2, %3 -> %0 \n'
                f'\t{output} = ({inputs[0]} & {inputs[1]}) | ({inputs[0]} & {inputs[2]}) | ({inputs[1]} & {inputs[2]});\n'
            ),
            "zero": lambda output, inputs: (
                f'\t// PIM_OP: zero -> %0 \n'
                f'\t{output} = 0;\n'
            ),
            "one": lambda output, inputs: (
                f'\t// PIM_OP: one -> %0 \n'
                f'\t{output} = 1;\n'
            ),
        }

    def generateSingleBitwiseStatement(self, item, bitwise_instructions):
        """ Generate a single bit-wise statement based on the logic gate type """
        inputs = self.sanitizeTokenList(item.inputList)
        output = self.sanitizeToken(item.output)

        for key, bitwise_func in bitwise_instructions.items():
            if item.name.startswith(key):
                return bitwise_func(output, inputs)

        print(f"Error: Unhandled item name {item.name}")
        return ''

    def generateAllBitwiseStatements(self):
        """ Generate C bit-wise statement sequence """
        bitwise_instructions = self.getBitwiseInstructions()

        code = '\t// ########## BEGIN ##########\n'

        for item in self.parser.statementList:
            code += self.generateSingleBitwiseStatement(item, bitwise_instructions)

        code += '\t// ########## END ##########\n'
        return code

    def generateStatementsOutput(self):
        """ Generate statements to store output temp vars to pointers """
        code = ""
        outputs = [item.replace("[", "_").replace("]", "_") for item in self.parser.outputsList]
        for item in outputs:
            code += "\t*" + item + '_po = ' + item + ";\n"
        return code

